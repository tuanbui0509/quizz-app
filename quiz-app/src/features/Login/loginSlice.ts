import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axiosClient from 'api/ApiCaller';
import { RootState } from '../../app/store';

export interface LoginState {
  value: boolean;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: LoginState = {
  value: false,
  status: 'idle',
};

// export const loginAsync = createAsyncThunk('counter/fetchCount', async (amount: number) => {
//   const response = await axiosClient(amount);
//   // The value we return becomes the `fulfilled` action payload
//   return response.data;
// });

export const loginSlice = createSlice({
  name: 'login',
  initialState,
  reducers: {
    login: (state) => {
      state.value = true;
    },
    logout: (state) => {
      state.value = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  //   extraReducers: (builder) => {
  //     builder
  //       .addCase(loginAsync.pending, (state) => {
  //         state.status = 'loading';
  //       })
  //       .addCase(loginAsync.fulfilled, (state, action) => {
  //         state.status = 'idle';
  //         state.value += action.payload;
  //       })
  //       .addCase(loginAsync.rejected, (state) => {
  //         state.status = 'failed';
  //       });
  //   },
});

export const { login, logout } = loginSlice.actions;
export const selectCount = (state: RootState) => state.counter.value;
export default loginSlice.reducer;
